version: '3.8'

services:
  user-service:
    build: ./user-service
    ports:
      - "${USER_SERVICE_PORT:-8080}:8080"
    depends_on:
      - mongo
    environment:
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    volumes:
      - user-mongo_store:/data/db
    env_file:
      - ./.env

  project-service:
    build: ./project-service
    ports:
      - "${PROJECT_SERVICE_PORT:-8081}:8080"
    depends_on:
      - nats
      - mongo
      - user-service
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    volumes:
      - project-mongo_store:/data/db
    env_file:
      - ./.env

  task-service:
    build: ./task-service
    ports:
      - "${TASK_SERVICE_PORT:-8082}:8080"
    depends_on:
      - mongo
      - nats
      - workflow-service
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
      - HDFS_URI=namenode:8020
    networks:
      - app-network
    volumes:
      - task-mongo_store:/data/db
    env_file:
      - ./.env

  workflow-service:
    build: ./workflow-service
    ports:
      - "${WORKFLOW_SERVICE_PORT:-8087}:8080"
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - NEO4J_URI=${NEO4J_URI:-neo4j://neo4j:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
    networks:
      - app-network
    env_file:
      - ./.env

  analytics-service:
    build: ./analytics-service
    ports:
      - "${ANALYTICS_SERVICE_PORT:-8088}:8080"
    depends_on:
      - nats
      - mongo
      - task-service
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    env_file:
      - ./.env


  event:
    build: ./workflow-service
    ports:
      - "${EVENT_SERVICE_PORT:-8084}:8080"
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - NEO4J_URI=${NEO4J_URI:-neo4j://neo4j:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
    networks:
      - app-network


  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    ports:
      - "8020:8020"

    environment:
      - CLUSTER_NAME=test


    volumes:
      - hadoop_namenode:/hadoop/dfs/name


    networks:
      - app-network
    env_file:
      - ./.env

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8

    container_name: datanode1
    hostname: datanode1
    depends_on:
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:8020"
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    networks:
      - app-network
    env_file:
      - ./.env

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    hostname: datanode2
    depends_on:
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:8020"
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data


    networks:
      - app-network
    env_file:
      - ./.env

  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    hostname: datanode3
    depends_on:
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:8020"
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data

    networks:
      - app-network
    env_file:
      - ./.env

  event_sourcing:
    hostname: "event_sourcing"
    build: ./event_sourcing
    container_name: ${EVENT_SERVICE_HOST}
    restart: always
    ports:
      - "${EVENT_SOURCING_PORT:-8085}:8080"
    env_file:
      - ./.env
    depends_on:
      - eventstore-db
    environment:
      - EVENTSTORE_ADDRESS=eventstore-db:2113
    volumes:
      - ${SSL_CERTIFICATE_PATH:-/etc/nginx/certs/server.crt}:/etc/nginx/certs/server.crt
      - ${SSL_CERTIFICATE_KEY_PATH:-/etc/nginx/certs/server.key}:/etc/nginx/certs/server.key
    networks:
      - app-network

  eventstore-db:
    image: eventstore/eventstore:21.10.8-buster-slim
    container_name: esdb
    hostname: esdb
    restart: always
    ports:
      - 2113:2113
      - 1113:1113
    environment:
      EVENTSTORE_CLUSTER_SIZE: 1
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_EXT_TCP_PORT: 1113
      EVENTSTORE_HTTP_PORT: 2113
      EVENTSTORE_START_STANDARD_PROJECTIONS: true
      EVENTSTORE_INSECURE: "true"
      EVENTSTORE_ENABLE_EXTERNAL_TCP: true
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: true
    volumes:
      - eventstore_data:/var/lib/eventstore
    networks:
      - app-network

  neo4j:
    image: neo4j:latest
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-a", "bolt://localhost:7687", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5


  mongo:
    image: mongo:latest
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - user-service
      - project-service
      - task-service
      - notification-service
      - workflow-service
    networks:
      - app-network
    environment:
      - NGINX_HTTP_PORT=${NGINX_HTTP_PORT:-80}
      - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT:-443}
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-localhost}
      - SSL_CERTIFICATE_PATH=${SSL_CERTIFICATE_PATH:-/etc/nginx/certs/server.crt}
      - SSL_CERTIFICATE_KEY_PATH=${SSL_CERTIFICATE_KEY_PATH:-/etc/nginx/certs/server.key}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST:-user-service}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT:-8080}
      - PROJECT_SERVICE_HOST=${PROJECT_SERVICE_HOST:-project-service}
      - PROJECT_SERVICE_PORT=${PROJECT_SERVICE_PORT:-8081}
      - TASK_SERVICE_HOST=${TASK_SERVICE_HOST:-task-service}
      - TASK_SERVICE_PORT=${TASK_SERVICE_PORT:-8082}
      - NOTIFICATION_SERVICE_HOST=${NOTIFICATION_SERVICE_HOST:-notification-service}
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT:-8083}
      - WORKFLOW_SERVICE_HOST=${WORKFLOW_SERVICE_HOST:-workflow-service}
      - WORKFLOW_SERVICE_PORT=${WORKFLOW_SERVICE_PORT:-8084}

  notification-service:
    build: ./notification-service
    restart: always
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8083}:8080"
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE:-notifications}
    depends_on:
      cassandra:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - app-network
    volumes:
      - cass_store:/var/lib/cassandra/data
  server:
    build:
      context: ./Hdfs
      dockerfile: Dockerfile
    container_name: "hdfs-server"
    hostname: "hdfs-server"
    ports:
      - "8086:8080" # Mapiranje porta 8080 u kontejneru na port 8086 na lokalnoj ma≈°ini
    environment:
      - HDFS_URI=namenode:8020 # URI za HDFS konekciju prema Namenode
    volumes:
      - ./files:/usr/bin/files # Mount lokalnog direktorijuma za datoteke u kontejner
    depends_on:
      namenode:
        condition: service_healthy
      datanode1:
        condition: service_healthy

    env_file:
      - ./.env
    networks:
      - app-network



  cassandra:
    image: cassandra:4.0
    restart: always
    container_name: "cassandra"
    hostname: "cassandra"
    ports:
      - "${CASSANDRA_PORT:-9042}:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME:-CassandraCluster}
      - CASSANDRA_DC=${CASSANDRA_DC:-DC1}
      - CASSANDRA_RACK=${CASSANDRA_RACK:-RAC1}
      - CASSANDRA_LISTENER_RPC_ADDRESS=${CASSANDRA_LISTENER_RPC_ADDRESS:-0.0.0.0}
    healthcheck:
      test: ["CMD", "cqlsh", "--username", "cassandra", "--password", "cassandra", "--execute", "describe keyspaces"]
      interval: 15s
      retries: 5
      timeout: 15s
    volumes:
      - cass_store:/var/lib/cassandra
    networks:
      - app-network

  nats:
    image: 'nats:latest'
    expose:
      - ${NATS_PORT:-4222}
    ports:
      - ${NATS_PORTS:-4222:4222}
    networks:
      - app-network

volumes:
  task-mongo_store:
  project-mongo_store:
  user-mongo_store:
  cass_store:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  eventstore_data:

networks:
  app-network:
    driver: bridge
